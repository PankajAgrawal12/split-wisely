generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum UserRole {
    USER
    ADMIN
}

enum ParticipantStatus {
    PENDING
    ACCEPTED
    REJECTED
}

enum PaymentStatus {
    PENDING
    PAID
    OVERDUE
    CANCELLED
}

enum NotificationType {
    PAYMENT_REMINDER
    PAYMENT_RECEIVED
    SUBSCRIPTION_INVITE
    SUBSCRIPTION_EXPIRED
    PAYMENT_OVERDUE
}

model User {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    email         String         @unique
    password      String
    name          String
    role          UserRole       @default(USER)
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    subscriptions Subscription[] // User's owned subscriptions
    participantOf Participant[] // Subscriptions this user is part of
    payments      Payment[] // Payments made by the user
    notifications Notification[]
    isActive      Boolean        @default(true)
    lastLogin     DateTime?
}

model Subscription {
    id              String        @id @default(auto()) @map("_id") @db.ObjectId
    name            String
    description     String?
    startDate       DateTime
    endDate         DateTime
    amount          Float // Total subscription amount
    splitType       String        @default("EQUAL") // "EQUAL", "PERCENTAGE", "CUSTOM"
    billingCycle    String        @default("MONTHLY") // "MONTHLY", "YEARLY", "ONE_TIME"
    ownerId         String        @db.ObjectId
    owner           User          @relation(fields: [ownerId], references: [id])
    participants    Participant[]
    payments        Payment[]
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    isActive        Boolean       @default(true)
    reminderEnabled Boolean       @default(true)
    currency        String        @default("USD")
}

model Participant {
    id             String            @id @default(auto()) @map("_id") @db.ObjectId
    subscriptionId String            @db.ObjectId
    userId         String            @db.ObjectId
    status         ParticipantStatus @default(PENDING)
    Subscription   Subscription      @relation(fields: [subscriptionId], references: [id])
    User           User              @relation(fields: [userId], references: [id])
    joinedAt       DateTime          @default(now())
    shareAmount    Float? // Amount or percentage based on splitType
    lastReminded   DateTime?
}

model Payment {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    subscriptionId String        @db.ObjectId
    userId         String        @db.ObjectId
    amount         Float
    dueDate        DateTime
    status         PaymentStatus @default(PENDING)
    Subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
    User           User          @relation(fields: [userId], references: [id])
    paidAt         DateTime?
    description    String?
    paymentMethod  String? // e.g., "CARD", "BANK_TRANSFER", "CASH"
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
}

model Notification {
    id        String           @id @default(auto()) @map("_id") @db.ObjectId
    userId    String           @db.ObjectId
    message   String
    type      NotificationType
    createdAt DateTime         @default(now())
    readAt    DateTime?
    User      User             @relation(fields: [userId], references: [id])
}
