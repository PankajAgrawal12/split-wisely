generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum UserRole {
    USER
    ADMIN
}

enum ParticipantStatus {
    PENDING
    ACCEPTED
    REJECTED
}

enum PaymentStatus {
    PENDING
    PAID
    OVERDUE
    CANCELLED
}

enum NotificationType {
    PAYMENT_REMINDER
    PAYMENT_RECEIVED
    SUBSCRIPTION_INVITE
    SUBSCRIPTION_EXPIRED
    PAYMENT_OVERDUE
}

model User {
    id           String         @id @default(auto()) @map("_id") @db.ObjectId
    clerkId      String         @unique
    email        String         @unique
    name         String
    phone        String?
    role         String         @default("user")
    isActive     Boolean        @default(true)
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    lastLogin    DateTime?
    Subscription Subscription[]
    Participant  Participant[]
    Payment      Payment[]
    Notification Notification[]
    payerSubscriptions    Subscription[] @relation("PayerSubscriptions")
    subscriptionMembers   SubscriptionMember[]
    payerSettlements     Settlement[]   @relation("PayerSettlements")
    settlerSettlements   Settlement[]   @relation("SettlerSettlements")
    bankAccounts         BankAccount[]
}

model Subscription {
    id              String        @id @default(auto()) @map("_id") @db.ObjectId
    name            String
    description     String?
    startDate       DateTime
    endDate         DateTime
    amount          Float // Total subscription amount
    splitType       String        @default("EQUAL") // "EQUAL", "PERCENTAGE", "CUSTOM"
    billingCycle    String        @default("MONTHLY") // "MONTHLY", "YEARLY", "ONE_TIME"
    ownerId         String        @db.ObjectId
    owner           User          @relation(fields: [ownerId], references: [id])
    participants    Participant[]
    payments        Payment[]
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    isActive        Boolean       @default(true)
    reminderEnabled Boolean       @default(true)
    currency        String        @default("USD")
    autoRenew       Boolean       @default(false)
    payerId         String?       @db.ObjectId
    payer             User?         @relation("PayerSubscriptions", fields: [payerId], references: [id])
    members         SubscriptionMember[]
    settlements     Settlement[]
}

model Participant {
    id             String            @id @default(auto()) @map("_id") @db.ObjectId
    subscriptionId String            @db.ObjectId
    userId         String            @db.ObjectId
    status         ParticipantStatus @default(PENDING)
    Subscription   Subscription      @relation(fields: [subscriptionId], references: [id])
    User           User              @relation(fields: [userId], references: [id])
    joinedAt       DateTime          @default(now())
    shareAmount    Float? // Amount or percentage based on splitType
    lastReminded   DateTime?
}

model Payment {
    id                String        @id @default(auto()) @map("_id") @db.ObjectId
    subscriptionId    String        @db.ObjectId
    userId            String        @db.ObjectId
    amount            Float
    dueDate           DateTime
    status            PaymentStatus @default(PENDING)
    Subscription      Subscription  @relation(fields: [subscriptionId], references: [id])
    User              User          @relation(fields: [userId], references: [id])
    paidAt            DateTime?
    description       String?
    paymentMethod     String? // e.g., "CARD", "BANK_TRANSFER", "CASH"
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    razorpayPaymentId String?
    razorpayOrderId   String?
    failureReason     String?
}

model Notification {
    id        String           @id @default(auto()) @map("_id") @db.ObjectId
    userId    String           @db.ObjectId
    message   String
    type      NotificationType
    createdAt DateTime         @default(now())
    readAt    DateTime?
    User      User             @relation(fields: [userId], references: [id])
}

model Settlement {
    id              String   @id @default(cuid()) @map("_id")
    subscriptionId  String   @db.ObjectId
    subscription    Subscription @relation(fields: [subscriptionId], references: [id])
    payerId         String   @db.ObjectId
    payerUser       User     @relation("PayerSettlements", fields: [payerId], references: [id])
    settlerId       String   @db.ObjectId
    settlerUser     User     @relation("SettlerSettlements", fields: [settlerId], references: [id])
    amount          Float
    status          SettlementStatus @default(PENDING)
    paymentLinkId   String?    // Razorpay payment link ID
    paymentId       String?    // Razorpay payment ID
    beneficiaryId   String?    // RazorpayX beneficiary ID
    fundAccountId   String?    // RazorpayX fund account ID
    payoutId        String?    // RazorpayX payout ID
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

enum SettlementStatus {
    PENDING
    PAYMENT_LINK_CREATED
    PAID
    SETTLED
    FAILED
}

model BankAccount {
    id            String   @id @default(cuid()) @map("_id")
    userId        String   @db.ObjectId
    user          User     @relation(fields: [userId], references: [id])
    accountNumber String
    ifscCode      String
    accountName   String
    isDefault     Boolean  @default(false)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model SubscriptionMember {
    id              String       @id @default(auto()) @map("_id") @db.ObjectId
    subscriptionId  String       @db.ObjectId
    userId          String       @db.ObjectId
    subscription    Subscription @relation(fields: [subscriptionId], references: [id])
    user            User         @relation(fields: [userId], references: [id])
    createdAt       DateTime     @default(now())
}
